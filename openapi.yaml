openapi: 3.0.1
info:
  title: clubmanager API
  description: clubmanager API documentation
  contact:
    name: Alan Delimon
  license:
    name: Alan Delimon
  version: 0.0.1
servers:
- url: //apps.palmyramx.com/
tags:
- name: user-resource
  description: User Resource
- name: member-resource
  description: Member Resource
- name: account-resource
  description: Account Resource
- name: member-message-resource
  description: Member Message Resource
- name: member-work-resource
  description: Member Work Resource
- name: board-member-resource
  description: Board Member Resource
- name: member-status-resource
  description: Member Status Resource
- name: logs-resource
  description: Logs Resource
- name: paid-labor-resource
  description: Paid Labor Resource
- name: riding-area-status-resource
  description: Riding Area Status Resource
- name: audit-resource
  description: Audit Resource
- name: billing-resource
  description: Billing Resource
- name: earned-points-resource
  description: Earned Points Resource
- name: schedule-date-resource
  description: Schedule Date Resource
- name: integration-resource
  description: Integration Resource
- name: paid-signup-resource
  description: Paid Signup Resource
- name: signup-resource
  description: Signup Resource
- name: job-resource
  description: Job Resource
- name: event-type-resource
  description: Event Type Resource
- name: signup-report-resource
  description: Signup Report Resource
- name: member-note-resource
  description: Member Note Resource
- name: member-types-resource
  description: Member Types Resource
paths:
  /api/account:
    get:
      tags:
      - account-resource
      summary: getAccount
      operationId: getAccountUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    post:
      tags:
      - account-resource
      summary: saveAccount
      operationId: saveAccountUsingPOST
      requestBody:
        description: userDTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: userDTO
  /api/account/change_password:
    post:
      tags:
      - account-resource
      summary: changePassword
      operationId: changePasswordUsingPOST
      requestBody:
        description: password
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: password
  /api/account/reset_password/finish:
    post:
      tags:
      - account-resource
      summary: finishPasswordReset
      operationId: finishPasswordResetUsingPOST
      requestBody:
        description: keyAndPassword
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyAndPasswordDTO'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: keyAndPassword
  /api/account/reset_password/init:
    post:
      tags:
      - account-resource
      summary: requestPasswordReset
      operationId: requestPasswordResetUsingPOST
      requestBody:
        description: mail
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: mail
  /api/account/sessions:
    get:
      tags:
      - account-resource
      summary: getCurrentSessions
      operationId: getCurrentSessionsUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersistentToken'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/account/sessions/{series}:
    delete:
      tags:
      - account-resource
      summary: invalidateSession
      operationId: invalidateSessionUsingDELETE
      parameters:
      - name: series
        in: path
        description: series
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/activate:
    get:
      tags:
      - account-resource
      summary: activateAccount
      operationId: activateAccountUsingGET
      parameters:
      - name: key
        in: query
        description: key
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/audits:
    get:
      tags:
      - audit-resource
      summary: getByDates
      operationId: getByDatesUsingGET
      parameters:
      - name: fromDate
        in: query
        description: fromDate
        required: true
        schema:
          type: string
      - name: toDate
        in: query
        description: toDate
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditEvent'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/audits/{id}:
    get:
      tags:
      - audit-resource
      summary: get
      operationId: getUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditEvent'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/authenticate:
    get:
      tags:
      - account-resource
      summary: isAuthenticated
      operationId: isAuthenticatedUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/billing/run:
    get:
      tags:
      - billing-resource
      summary: generateYearlyBills
      operationId: generateYearlyBillsUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONObject'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/billing/send/{memberId}/{year}:
    get:
      tags:
      - billing-resource
      summary: generateBill
      operationId: generateBillUsingGET
      parameters:
      - name: memberId
        in: path
        description: memberId
        required: true
        schema:
          type: integer
          format: int64
      - name: year
        in: path
        description: year
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONObject'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/billing/{year}/{dryRun}/{count}:
    get:
      tags:
      - billing-resource
      summary: sendUnsentBills
      operationId: sendUnsentBillsUsingGET
      parameters:
      - name: year
        in: path
        description: year
        required: true
        schema:
          type: integer
          format: int32
      - name: dryRun
        in: path
        description: dryRun
        required: true
        schema:
          type: boolean
      - name: count
        in: path
        description: count
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberBill'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/boardMembers:
    get:
      tags:
      - board-member-resource
      summary: getAllBoardMembers
      operationId: getAllBoardMembersUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BoardMember'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - board-member-resource
      summary: updateBoardMember
      operationId: updateBoardMemberUsingPUT
      requestBody:
        description: boardMember
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoardMember'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardMember'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: boardMember
    post:
      tags:
      - board-member-resource
      summary: createBoardMember
      operationId: createBoardMemberUsingPOST
      requestBody:
        description: boardMember
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoardMember'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardMember'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: boardMember
  /api/boardMembers/{id}:
    get:
      tags:
      - board-member-resource
      summary: getBoardMember
      operationId: getBoardMemberUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardMember'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - board-member-resource
      summary: deleteBoardMember
      operationId: deleteBoardMemberUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/earnedPoints/{memberId}/{eventId}:
    post:
      tags:
      - earned-points-resource
      summary: createEarnedPointsFromSignup
      operationId: createEarnedPointsFromSignupUsingPOST
      parameters:
      - name: memberId
        in: path
        description: memberId
        required: true
        schema:
          type: integer
          format: int64
      - name: eventId
        in: path
        description: eventId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EarnedPoints'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/earnedPointss:
    get:
      tags:
      - earned-points-resource
      summary: getAllEarnedPointss
      operationId: getAllEarnedPointssUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EarnedPoints'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - earned-points-resource
      summary: updateEarnedPoints
      operationId: updateEarnedPointsUsingPUT
      requestBody:
        description: earnedPoints
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EarnedPoints'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EarnedPoints'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: earnedPoints
    post:
      tags:
      - earned-points-resource
      summary: createEarnedPoints
      operationId: createEarnedPointsUsingPOST
      requestBody:
        description: earnedPoints
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EarnedPoints'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EarnedPoints'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: earnedPoints
  /api/earnedPointss/me:
    get:
      tags:
      - earned-points-resource
      summary: getUserEarnedPoints
      operationId: getUserEarnedPointsUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EarnedPoints'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/earnedPointss/member{memberId}:
    get:
      tags:
      - earned-points-resource
      summary: getMemberEarnedPoints
      operationId: getMemberEarnedPointsUsingGET
      parameters:
      - name: memberId
        in: path
        description: memberId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EarnedPoints'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/earnedPointss/myVerifications:
    get:
      tags:
      - earned-points-resource
      summary: getUserVerifications
      operationId: getUserVerificationsUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EarnedPoints'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/earnedPointss/unverified:
    get:
      tags:
      - earned-points-resource
      summary: getUnverifiedEarnedPoints
      operationId: getUnverifiedEarnedPointsUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EarnedPoints'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/earnedPointss/{id}:
    get:
      tags:
      - earned-points-resource
      summary: getEarnedPoints
      operationId: getEarnedPointsUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EarnedPoints'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - earned-points-resource
      summary: deleteEarnedPoints
      operationId: deleteEarnedPointsUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/earnedPointss/{year}/member{memberId}:
    get:
      tags:
      - earned-points-resource
      summary: getMemberEarnedPoints
      operationId: getMemberEarnedPointsUsingGET2
      parameters:
      - name: memberId
        in: path
        description: memberId
        required: true
        schema:
          type: integer
          format: int64
      - name: year
        in: path
        description: year
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EarnedPoints'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/eventTypes:
    get:
      tags:
      - event-type-resource
      summary: getAllEventTypes
      operationId: getAllEventTypesUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventType'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - event-type-resource
      summary: updateEventType
      operationId: updateEventTypeUsingPUT
      requestBody:
        description: eventType
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventType'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventType'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: eventType
    post:
      tags:
      - event-type-resource
      summary: createEventType
      operationId: createEventTypeUsingPOST
      requestBody:
        description: eventType
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventType'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventType'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: eventType
  /api/eventTypes/{id}:
    get:
      tags:
      - event-type-resource
      summary: getEventType
      operationId: getEventTypeUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventType'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - event-type-resource
      summary: deleteEventType
      operationId: deleteEventTypeUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/integrations:
    get:
      tags:
      - integration-resource
      summary: getAllIntegrations
      operationId: getAllIntegrationsUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Integration'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - integration-resource
      summary: updateIntegration
      operationId: updateIntegrationUsingPUT
      requestBody:
        description: integration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Integration'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: integration
    post:
      tags:
      - integration-resource
      summary: createIntegration
      operationId: createIntegrationUsingPOST
      requestBody:
        description: integration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Integration'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: integration
  /api/integrations/{id}:
    get:
      tags:
      - integration-resource
      summary: getIntegration
      operationId: getIntegrationUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Integration'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - integration-resource
      summary: deleteIntegration
      operationId: deleteIntegrationUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/jobs:
    get:
      tags:
      - job-resource
      summary: getAllJobs
      operationId: getAllJobsUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - job-resource
      summary: updateJob
      operationId: updateJobUsingPUT
      requestBody:
        description: job
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: job
    post:
      tags:
      - job-resource
      summary: createJob
      operationId: createJobUsingPOST
      requestBody:
        description: job
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: job
  /api/jobs/availOn{scheduleDateId}:
    get:
      tags:
      - job-resource
      summary: getAvailableJobsForDate
      operationId: getAvailableJobsForDateUsingGET
      parameters:
      - name: scheduleDateId
        in: path
        description: scheduleDateId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/jobs/clone/{id}/{count}:
    get:
      tags:
      - job-resource
      summary: cloneJob
      operationId: cloneJobUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      - name: count
        in: path
        description: count
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/jobs/{id}:
    get:
      tags:
      - job-resource
      summary: getJob
      operationId: getJobUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - job-resource
      summary: deleteJob
      operationId: deleteJobUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/logs:
    get:
      tags:
      - logs-resource
      summary: getList
      operationId: getListUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LoggerDTO'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - logs-resource
      summary: changeLevel
      operationId: changeLevelUsingPUT
      requestBody:
        description: jsonLogger
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoggerDTO'
        required: true
      responses:
        201:
          description: Created
          content: {}
        204:
          description: No Description
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: jsonLogger
  /api/memberMessages:
    get:
      tags:
      - member-message-resource
      summary: getAllMemberMessages
      operationId: getAllMemberMessagesUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberMessage'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - member-message-resource
      summary: updateMemberMessage
      operationId: updateMemberMessageUsingPUT
      requestBody:
        description: memberMessage
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberMessage'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberMessage'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: memberMessage
    post:
      tags:
      - member-message-resource
      summary: createMemberMessage
      operationId: createMemberMessageUsingPOST
      requestBody:
        description: memberMessage
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberMessage'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberMessage'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: memberMessage
  /api/memberMessages/send{id}:
    get:
      tags:
      - member-message-resource
      summary: sendMessage
      operationId: sendMessageUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/memberMessages/{id}:
    get:
      tags:
      - member-message-resource
      summary: getMemberMessage
      operationId: getMemberMessageUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberMessage'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - member-message-resource
      summary: deleteMemberMessage
      operationId: deleteMemberMessageUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/memberNotes:
    get:
      tags:
      - member-note-resource
      summary: getAllMemberNotes
      operationId: getAllMemberNotesUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberNote'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - member-note-resource
      summary: updateMemberNote
      operationId: updateMemberNoteUsingPUT
      requestBody:
        description: memberNote
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberNote'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberNote'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: memberNote
    post:
      tags:
      - member-note-resource
      summary: createMemberNote
      operationId: createMemberNoteUsingPOST
      requestBody:
        description: memberNote
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberNote'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberNote'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: memberNote
  /api/memberNotes/{id}:
    get:
      tags:
      - member-note-resource
      summary: getMemberNote
      operationId: getMemberNoteUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberNote'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - member-note-resource
      summary: deleteMemberNote
      operationId: deleteMemberNoteUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/memberStatuss:
    get:
      tags:
      - member-status-resource
      summary: getAllMemberStatuss
      operationId: getAllMemberStatussUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberStatus'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - member-status-resource
      summary: updateMemberStatus
      operationId: updateMemberStatusUsingPUT
      requestBody:
        description: memberStatus
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberStatus'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberStatus'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: memberStatus
    post:
      tags:
      - member-status-resource
      summary: createMemberStatus
      operationId: createMemberStatusUsingPOST
      requestBody:
        description: memberStatus
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberStatus'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberStatus'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: memberStatus
  /api/memberStatuss/{id}:
    get:
      tags:
      - member-status-resource
      summary: getMemberStatus
      operationId: getMemberStatusUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberStatus'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - member-status-resource
      summary: deleteMemberStatus
      operationId: deleteMemberStatusUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/memberTypess:
    get:
      tags:
      - member-types-resource
      summary: getAllMemberTypess
      operationId: getAllMemberTypessUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberTypes'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - member-types-resource
      summary: updateMemberTypes
      operationId: updateMemberTypesUsingPUT
      requestBody:
        description: memberTypes
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberTypes'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberTypes'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: memberTypes
    post:
      tags:
      - member-types-resource
      summary: createMemberTypes
      operationId: createMemberTypesUsingPOST
      requestBody:
        description: memberTypes
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberTypes'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberTypes'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: memberTypes
  /api/memberTypess/{id}:
    get:
      tags:
      - member-types-resource
      summary: getMemberTypes
      operationId: getMemberTypesUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberTypes'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - member-types-resource
      summary: deleteMemberTypes
      operationId: deleteMemberTypesUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/memberWorks:
    get:
      tags:
      - member-work-resource
      summary: getAllMemberWorks
      operationId: getAllMemberWorksUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberWork'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - member-work-resource
      summary: updateMemberWork
      operationId: updateMemberWorkUsingPUT
      requestBody:
        description: memberWork
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberWork'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberWork'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: memberWork
    post:
      tags:
      - member-work-resource
      summary: createMemberWork
      operationId: createMemberWorkUsingPOST
      requestBody:
        description: memberWork
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberWork'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberWork'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: memberWork
  /api/memberWorks/{id}:
    get:
      tags:
      - member-work-resource
      summary: getMemberWork
      operationId: getMemberWorkUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberWork'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - member-work-resource
      summary: deleteMemberWork
      operationId: deleteMemberWorkUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/members:
    get:
      tags:
      - member-resource
      summary: getAllMembers
      operationId: getAllMembersUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Member'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - member-resource
      summary: updateMember
      operationId: updateMemberUsingPUT
      requestBody:
        description: member
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: member
    post:
      tags:
      - member-resource
      summary: createMember
      operationId: createMemberUsingPOST
      requestBody:
        description: member
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: member
  /api/members/andworkers:
    get:
      tags:
      - member-resource
      summary: getAllMembersAndPaidWorkers
      operationId: getAllMembersAndPaidWorkersUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Member'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/members/list:
    get:
      tags:
      - member-resource
      summary: exportMeetingSignIn
      operationId: exportMeetingSignInUsingGET
      responses:
        200:
          description: OK
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - member-resource
      summary: exportMeetingSignIn
      operationId: exportMeetingSignInUsingPUT
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    post:
      tags:
      - member-resource
      summary: exportMeetingSignIn
      operationId: exportMeetingSignInUsingPOST
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - member-resource
      summary: exportMeetingSignIn
      operationId: exportMeetingSignInUsingDELETE
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
    options:
      tags:
      - member-resource
      summary: exportMeetingSignIn
      operationId: exportMeetingSignInUsingOPTIONS
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
    patch:
      tags:
      - member-resource
      summary: exportMeetingSignIn
      operationId: exportMeetingSignInUsingPATCH
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/members/me:
    get:
      tags:
      - member-resource
      summary: getUserMemberRecord
      operationId: getUserMemberRecordUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/members/points:
    get:
      tags:
      - member-resource
      summary: exportMemberPoints
      operationId: exportMemberPointsUsingGET
      responses:
        200:
          description: OK
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - member-resource
      summary: exportMemberPoints
      operationId: exportMemberPointsUsingPUT
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    post:
      tags:
      - member-resource
      summary: exportMemberPoints
      operationId: exportMemberPointsUsingPOST
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - member-resource
      summary: exportMemberPoints
      operationId: exportMemberPointsUsingDELETE
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
    options:
      tags:
      - member-resource
      summary: exportMemberPoints
      operationId: exportMemberPointsUsingOPTIONS
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
    patch:
      tags:
      - member-resource
      summary: exportMemberPoints
      operationId: exportMemberPointsUsingPATCH
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/members/visible:
    get:
      tags:
      - member-resource
      summary: getVisibleMembers
      operationId: getVisibleMembersUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Member'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/members/{id}:
    get:
      tags:
      - member-resource
      summary: getMember
      operationId: getMemberUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - member-resource
      summary: deleteMember
      operationId: deleteMemberUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/paidLabors:
    get:
      tags:
      - paid-labor-resource
      summary: getAllPaidLabors
      operationId: getAllPaidLaborsUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaidLabor'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - paid-labor-resource
      summary: updatePaidLabor
      operationId: updatePaidLaborUsingPUT
      requestBody:
        description: paidLabor
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaidLabor'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaidLabor'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: paidLabor
    post:
      tags:
      - paid-labor-resource
      summary: createPaidLabor
      operationId: createPaidLaborUsingPOST
      requestBody:
        description: paidLabor
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaidLabor'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaidLabor'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: paidLabor
  /api/paidLabors/{id}:
    get:
      tags:
      - paid-labor-resource
      summary: getPaidLabor
      operationId: getPaidLaborUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaidLabor'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - paid-labor-resource
      summary: deletePaidLabor
      operationId: deletePaidLaborUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/paidSignups:
    get:
      tags:
      - paid-signup-resource
      summary: getAllPaidSignups
      operationId: getAllPaidSignupsUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaidSignup'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - paid-signup-resource
      summary: updatePaidSignup
      operationId: updatePaidSignupUsingPUT
      requestBody:
        description: paidSignup
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaidSignup'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaidSignup'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: paidSignup
    post:
      tags:
      - paid-signup-resource
      summary: createPaidSignup
      operationId: createPaidSignupUsingPOST
      requestBody:
        description: paidSignup
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaidSignup'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaidSignup'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: paidSignup
  /api/paidSignups/{id}:
    get:
      tags:
      - paid-signup-resource
      summary: getPaidSignup
      operationId: getPaidSignupUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaidSignup'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - paid-signup-resource
      summary: deletePaidSignup
      operationId: deletePaidSignupUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/register:
    post:
      tags:
      - account-resource
      summary: registerAccount
      operationId: registerAccountUsingPOST
      requestBody:
        description: userDTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: userDTO
  /api/ridingAreaStatuss:
    get:
      tags:
      - riding-area-status-resource
      summary: getAllRidingAreaStatuss
      operationId: getAllRidingAreaStatussUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RidingAreaStatus'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - riding-area-status-resource
      summary: updateRidingAreaStatus
      operationId: updateRidingAreaStatusUsingPUT
      requestBody:
        description: ridingAreaStatus
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RidingAreaStatus'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RidingAreaStatus'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: ridingAreaStatus
    post:
      tags:
      - riding-area-status-resource
      summary: createRidingAreaStatus
      operationId: createRidingAreaStatusUsingPOST
      requestBody:
        description: ridingAreaStatus
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RidingAreaStatus'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RidingAreaStatus'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: ridingAreaStatus
  /api/ridingAreaStatuss/{id}:
    get:
      tags:
      - riding-area-status-resource
      summary: getRidingAreaStatus
      operationId: getRidingAreaStatusUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RidingAreaStatus'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - riding-area-status-resource
      summary: deleteRidingAreaStatus
      operationId: deleteRidingAreaStatusUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/scheduleDates:
    get:
      tags:
      - schedule-date-resource
      summary: getAllScheduleDates
      operationId: getAllScheduleDatesUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduleDate'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - schedule-date-resource
      summary: updateScheduleDate
      operationId: updateScheduleDateUsingPUT
      requestBody:
        description: scheduleDate
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleDate'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleDate'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: scheduleDate
    post:
      tags:
      - schedule-date-resource
      summary: createScheduleDate
      operationId: createScheduleDateUsingPOST
      requestBody:
        description: scheduleDate
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleDate'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleDate'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: scheduleDate
  /api/scheduleDates/future:
    get:
      tags:
      - schedule-date-resource
      summary: getFutureDates
      operationId: getFutureDatesUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduleDate'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/scheduleDates/{id}:
    get:
      tags:
      - schedule-date-resource
      summary: getScheduleDate
      operationId: getScheduleDateUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleDate'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - schedule-date-resource
      summary: deleteScheduleDate
      operationId: deleteScheduleDateUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/signupReports:
    get:
      tags:
      - signup-report-resource
      summary: getAllSignupReports
      operationId: getAllSignupReportsUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SignupReport'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - signup-report-resource
      summary: updateSignupReport
      operationId: updateSignupReportUsingPUT
      requestBody:
        description: signupReport
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupReport'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupReport'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: signupReport
    post:
      tags:
      - signup-report-resource
      summary: createSignupReport
      operationId: createSignupReportUsingPOST
      requestBody:
        description: signupReport
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupReport'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupReport'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: signupReport
  /api/signupReports/meeting/excel:
    get:
      tags:
      - signup-report-resource
      summary: exportMeetingSignIn
      operationId: exportMeetingSignInUsingGET2
      responses:
        200:
          description: OK
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - signup-report-resource
      summary: exportMeetingSignIn
      operationId: exportMeetingSignInUsingPUT2
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    post:
      tags:
      - signup-report-resource
      summary: exportMeetingSignIn
      operationId: exportMeetingSignInUsingPOST2
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - signup-report-resource
      summary: exportMeetingSignIn
      operationId: exportMeetingSignInUsingDELETE2
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
    options:
      tags:
      - signup-report-resource
      summary: exportMeetingSignIn
      operationId: exportMeetingSignInUsingOPTIONS2
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
    patch:
      tags:
      - signup-report-resource
      summary: exportMeetingSignIn
      operationId: exportMeetingSignInUsingPATCH2
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/signupReports/race/excel:
    get:
      tags:
      - signup-report-resource
      summary: exportSignups
      operationId: exportSignupsUsingGET
      responses:
        200:
          description: OK
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - signup-report-resource
      summary: exportSignups
      operationId: exportSignupsUsingPUT
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    post:
      tags:
      - signup-report-resource
      summary: exportSignups
      operationId: exportSignupsUsingPOST
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - signup-report-resource
      summary: exportSignups
      operationId: exportSignupsUsingDELETE
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
    options:
      tags:
      - signup-report-resource
      summary: exportSignups
      operationId: exportSignupsUsingOPTIONS
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
    patch:
      tags:
      - signup-report-resource
      summary: exportSignups
      operationId: exportSignupsUsingPATCH
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/signupReports/workday/excel:
    get:
      tags:
      - signup-report-resource
      summary: exportWorkdaySignin
      operationId: exportWorkdaySigninUsingGET
      responses:
        200:
          description: OK
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - signup-report-resource
      summary: exportWorkdaySignin
      operationId: exportWorkdaySigninUsingPUT
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    post:
      tags:
      - signup-report-resource
      summary: exportWorkdaySignin
      operationId: exportWorkdaySigninUsingPOST
      responses:
        200:
          description: OK
          content: {}
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - signup-report-resource
      summary: exportWorkdaySignin
      operationId: exportWorkdaySigninUsingDELETE
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
    options:
      tags:
      - signup-report-resource
      summary: exportWorkdaySignin
      operationId: exportWorkdaySigninUsingOPTIONS
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
    patch:
      tags:
      - signup-report-resource
      summary: exportWorkdaySignin
      operationId: exportWorkdaySigninUsingPATCH
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/signupReports/{id}:
    get:
      tags:
      - signup-report-resource
      summary: getSignupReport
      operationId: getSignupReportUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupReport'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - signup-report-resource
      summary: deleteSignupReport
      operationId: deleteSignupReportUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/signups:
    get:
      tags:
      - signup-resource
      summary: getAllSignups
      operationId: getAllSignupsUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Signup'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - signup-resource
      summary: updateSignup
      operationId: updateSignupUsingPUT
      requestBody:
        description: signup
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Signup'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Signup'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: signup
    post:
      tags:
      - signup-resource
      summary: createSignup
      operationId: createSignupUsingPOST
      requestBody:
        description: signup
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Signup'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Signup'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: signup
  /api/signups/me:
    post:
      tags:
      - signup-resource
      summary: createSignupForMe
      operationId: createSignupForMeUsingPOST
      requestBody:
        description: signup
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Signup'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Signup'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: signup
  /api/signups/{id}:
    get:
      tags:
      - signup-resource
      summary: getSignup
      operationId: getSignupUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Signup'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - signup-resource
      summary: deleteSignup
      operationId: deleteSignupUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
  /api/users:
    get:
      tags:
      - user-resource
      summary: getAllUsers
      operationId: getAllUsersUsingGET
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ManagedUserDTO'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    put:
      tags:
      - user-resource
      summary: updateUser
      operationId: updateUserUsingPUT
      requestBody:
        description: managedUserDTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedUserDTO'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedUserDTO'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: managedUserDTO
    post:
      tags:
      - user-resource
      summary: createUser
      operationId: createUserUsingPOST
      requestBody:
        description: managedUserDTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedUserDTO'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      x-codegen-request-body-name: managedUserDTO
  /api/users/reset/{memberId}:
    get:
      tags:
      - user-resource
      summary: resetToDefault
      operationId: resetToDefaultUsingGET
      parameters:
      - name: memberId
        in: path
        description: memberId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: OK
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
  /api/users/{login}:
    get:
      tags:
      - user-resource
      summary: getUser
      operationId: getUserUsingGET
      parameters:
      - name: login
        in: path
        description: login
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedUserDTO'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
    delete:
      tags:
      - user-resource
      summary: deleteUser
      operationId: deleteUserUsingDELETE
      parameters:
      - name: login
        in: path
        description: login
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content: {}
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
components:
  schemas:
    PaidLabor:
      type: object
      properties:
        firstName:
          type: string
        id:
          type: integer
          format: int64
        lastName:
          type: string
        memberLinkedTo:
          $ref: '#/components/schemas/Member'
        name:
          type: string
    RidingAreaStatus:
      type: object
      properties:
        areaName:
          type: string
        id:
          type: integer
          format: int64
        status:
          type: boolean
    EventType:
      type: object
      properties:
        endHour:
          type: integer
          format: int32
        id:
          type: integer
          format: int64
        startHour:
          type: integer
          format: int32
        startMinute:
          type: integer
          format: int32
        type:
          type: string
    UserDTO:
      type: object
      properties:
        activated:
          type: boolean
        authorities:
          type: array
          items:
            type: string
        email:
          type: string
        firstName:
          type: string
        langKey:
          type: string
        lastName:
          type: string
        login:
          type: string
        password:
          type: string
    MemberMessage:
      type: object
      properties:
        id:
          type: integer
          format: int64
        messageText:
          type: string
        sendDate:
          type: string
        subject:
          type: string
    MemberWork:
      type: object
      properties:
        description:
          type: string
        end:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        member:
          $ref: '#/components/schemas/Member'
        start:
          type: string
          format: date-time
    ScheduleDate:
      type: object
      properties:
        date:
          type: string
        eventDescription:
          type: string
        eventName:
          type: string
        eventType:
          $ref: '#/components/schemas/EventType'
        id:
          type: integer
          format: int64
    PersistentToken:
      type: object
      properties:
        formattedTokenDate:
          type: string
        ipAddress:
          type: string
        series:
          type: string
        userAgent:
          type: string
    MemberTypes:
      type: object
      properties:
        baseDuesAmount:
          type: number
          format: float
        id:
          type: integer
          format: int64
        type:
          type: string
    KeyAndPasswordDTO:
      type: object
      properties:
        key:
          type: string
        newPassword:
          type: string
    MemberNote:
      type: object
      properties:
        date:
          type: string
        id:
          type: integer
          format: int64
        member:
          $ref: '#/components/schemas/Member'
        notes:
          type: string
    LoggerDTO:
      type: object
      properties:
        level:
          type: string
        name:
          type: string
    BoardMember:
      type: object
      properties:
        id:
          type: integer
          format: int64
        member:
          $ref: '#/components/schemas/Member'
        title:
          type: string
        year:
          type: integer
          format: int32
    ManagedUserDTO:
      type: object
      properties:
        activated:
          type: boolean
        authorities:
          type: array
          items:
            type: string
        createdDate:
          type: string
          format: date-time
        email:
          type: string
        firstName:
          type: string
        id:
          type: integer
          format: int64
        langKey:
          type: string
        lastModifiedBy:
          type: string
        lastModifiedDate:
          type: string
          format: date-time
        lastName:
          type: string
        login:
          type: string
        password:
          type: string
    AuditEvent:
      type: object
      properties:
        data:
          type: object
          properties: {}
        principal:
          type: string
        timestamp:
          type: string
          format: date-time
        type:
          type: string
    Job:
      type: object
      properties:
        cashValue:
          type: number
          format: float
        eventType:
          $ref: '#/components/schemas/EventType'
        id:
          type: integer
          format: int64
        jobDay:
          type: string
        jobDayNumber:
          type: integer
          format: int32
        mealTicket:
          type: boolean
        online:
          type: boolean
        pointValue:
          type: number
          format: float
        reserved:
          type: boolean
        sortOrder:
          type: integer
          format: int32
        title:
          type: string
        workLeader:
          $ref: '#/components/schemas/Member'
    Member:
      type: object
      properties:
        active:
          type: boolean
        address:
          type: string
        birthday:
          type: string
        city:
          type: string
        currentYearPaid:
          type: boolean
        currentYearRenewed:
          type: boolean
        dateJoined:
          type: string
        email:
          type: string
        endDate:
          type: string
          format: date-time
        firstName:
          type: string
        firstNameLastName:
          type: string
        id:
          type: integer
          format: int64
        lastName:
          type: string
        name:
          type: string
        occupation:
          type: string
        paidLabor:
          type: boolean
        phone:
          type: string
        prefersMail:
          type: boolean
        renewalSent:
          type: boolean
        state:
          type: string
        status:
          $ref: '#/components/schemas/MemberTypes'
        token:
          type: string
        viewOnline:
          type: boolean
        zip:
          type: string
    Signup:
      type: object
      properties:
        id:
          type: integer
          format: int64
        job:
          $ref: '#/components/schemas/Job'
        scheduleDate:
          $ref: '#/components/schemas/ScheduleDate'
        worker:
          $ref: '#/components/schemas/Member'
    Integration:
      type: object
      properties:
        apikey:
          type: string
        id:
          type: integer
          format: int64
        platform:
          type: string
    PaidSignup:
      type: object
      properties:
        id:
          type: integer
          format: int64
        job:
          $ref: '#/components/schemas/Job'
        paidLabor:
          $ref: '#/components/schemas/PaidLabor'
        scheduleDate:
          $ref: '#/components/schemas/ScheduleDate'
    SignupReport:
      type: object
      properties:
        cashValue:
          type: number
          format: float
        date:
          type: string
        id:
          type: integer
          format: int64
        jobDay:
          type: string
        jobId:
          type: integer
          format: int64
        leader:
          type: string
        mealTicket:
          type: boolean
        name:
          type: string
        pointValue:
          type: number
          format: float
        reserved:
          type: boolean
        scheduleDateId:
          type: integer
          format: int64
        signupId:
          type: integer
          format: int64
        title:
          type: string
    EarnedPoints:
      type: object
      properties:
        cashValue:
          type: number
          format: float
        date:
          type: string
        description:
          type: string
        eventType:
          $ref: '#/components/schemas/EventType'
        id:
          type: integer
          format: int64
        lastModifiedBy:
          type: string
        lastModifiedDate:
          type: string
        member:
          $ref: '#/components/schemas/Member'
        paid:
          type: boolean
        pointValue:
          type: number
          format: float
        points:
          type: boolean
        signup:
          $ref: '#/components/schemas/Signup'
        verified:
          type: boolean
    JSONObject:
      type: object
    MemberBill:
      type: object
      properties:
        amount:
          type: number
          format: double
        amountWithFee:
          type: number
          format: double
        billStatus:
          type: string
        emailedBill:
          type: string
        id:
          type: integer
          format: int64
        member:
          $ref: '#/components/schemas/Member'
        sent:
          type: boolean
        year:
          type: integer
          format: int32
    MemberStatus:
      type: object
      properties:
        id:
          type: integer
          format: int64
        member:
          $ref: '#/components/schemas/Member'
        memberTypes:
          $ref: '#/components/schemas/MemberTypes'
        year:
          type: integer
          format: int32
