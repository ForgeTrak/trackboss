openapi: 3.0.3
info:
  title: ClubManager API
  description: >
    Specification for the ClubManager API,
    used by web and mobile clients to interact with the server.
  version: 0.1.0
tags:
  - name: member
    description: Creating, updating, and getting members.
  - name: memberType
    description: Updating and getting memberTypes.
  - name: membership
    description: >
      Creating, updating, and getting memberships (which can contain multiple
      members), including registration.
  - name: bike
    description: >
      Creating, updating, and getting bikes as assigned to memberships.
  - name: event
    description: Creating, updating, and getting events.
  - name: eventType
    description: Creating, updating, and getting eventTypes.
  - name: job
    description: Creating, updating, and getting jobs.
  - name: jobType
    description: Creating, updating, and getting jobTypes.
  - name: workPoints
    description: Obtaining verified work points for a member or membership.
  - name: eventJob
    description: >
      Relating events and jobs: by default, *this* event type needs
      *X* amount of *that* job type.
  - name: billing
    description: >
      Handling billing calculation, distribution, payment, and retrieval.
  - name: boardMember
    description: >
      Creating, updating, and getting boardMembers
  - name: boardMemberType
    description: >
      Creating, updating, and getting boardMemberTypes
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    badRequestError:
      description: "Bad Request: Request body is missing or invalid"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorResponse"
    unauthorizedError:
      description: "Unauthorized: ID token is missing or invalid"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorResponse"
    forbiddenError:
      description: >
        Forbidden: The user has insufficient permissions for this resource
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorResponse"
    notFoundError:
      description: "Not Found: The resource does not exist"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorResponse"
    internalServerError:
      description: >
        Internal Server Error: The server has had an error unrelated to the
        user's actions
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errorResponse"
  schemas:
    integer:
      type: integer
      format: int32
      minimum: 0
    number: # to handle floats
      type: number
      minimum: 0
    string:
      type: string
      maxLength: 255
    shortString:
      type: string
      maxLength: 50
    uuid:
      type: string
      format: uuid
    date:
      type: string
      format: date
    email:
      type: string
      format: email
      maxLength: 255
    errorResponse:
      type: object
      properties:
        reason:
          type: string
    member:
      type: object
      properties:
        memberId:
          $ref: "#/components/schemas/number" # just the DB ID
        membershipAdmin:
          $ref: "#/components/schemas/string"
        uuid:
          $ref: "#/components/schemas/uuid"
        active:
          type: boolean
        memberType:
          $ref: "#/components/schemas/string"
        firstName:
          $ref: "#/components/schemas/string"
        lastName:
          $ref: "#/components/schemas/string"
        phoneNumber:
          type: string
        occupation:
          $ref: "#/components/schemas/string"
        email:
          $ref: "#/components/schemas/email"
        birthdate:
          $ref: "#/components/schemas/date"
        dateJoined:
          $ref: "#/components/schemas/date"
        address:
          $ref: "#/components/schemas/string"
        city:
          $ref: "#/components/schemas/string"
        state:
          $ref: "#/components/schemas/string"
        zip:
          $ref: "#/components/schemas/string"
        lastModifiedDate:
          $ref: "#/components/schemas/date"
        lastModifiedBy:
          $ref: "#/components/schemas/string"
    memberType:
      type: object
      properties:
        memberTypeId:
          $ref: "#/components/schemas/integer"
        type:
          $ref: "#/components/schemas/string"
        baseDuesAmt:
          $ref: "#/components/schemas/number"
    membership:
      type: object
      properties:
        membershipId:
          $ref: "#/components/schemas/integer"
        membershipAdmin:
          $ref: "#/components/schemas/string"
        status:
          $ref: "#/components/schemas/string"
        curYearRenewed:
          type: boolean
        renewalSent:
          type: boolean
        yearJoined:
          $ref: "#/components/schemas/integer"
        address:
          $ref: "#/components/schemas/string"
        city:
          $ref: "#/components/schemas/string"
        state:
          $ref: "#/components/schemas/string"
        zip:
          $ref: "#/components/schemas/string"
        lastModifiedDate:
          $ref: "#/components/schemas/date"
        lastModifiedBy:
          $ref: "#/components/schemas/string"
    registration:
      type: object
      properties:
        memberType:
          $ref: "#/components/schemas/string"
        firstName:
          $ref: "#/components/schemas/string"
        lastName:
          $ref: "#/components/schemas/string"
        phoneNumber:
          $ref: "#/components/schemas/string"
        occupation:
          $ref: "#/components/schemas/string"
        email:
          $ref: "#/components/schemas/email"
        birthdate:
          $ref: "#/components/schemas/date"
        address:
          $ref: "#/components/schemas/string"
        city:
          $ref: "#/components/schemas/string"
        state:
          $ref: "#/components/schemas/string"
        zip:
          $ref: "#/components/schemas/string"
    bike:
      type: object
      properties:
        bikeId:
          $ref: "#/components/schemas/integer"
        year:
          $ref: "#/components/schemas/shortString"
        make:
          $ref: "#/components/schemas/shortString"
        model:
          $ref: "#/components/schemas/shortString"
        membershipAdmin:
          $ref: "#/components/schemas/string"
    event:
      type: object
      properties:
        eventId:
          $ref: "#/components/schemas/integer"
        date:
          $ref: "#/components/schemas/date"
        eventType:
          $ref: "#/components/schemas/string"
        eventName:
          $ref: "#/components/schemas/string"
        eventDescription:
          $ref: "#/components/schemas/string"
    eventType:
      type: object
      properties:
        eventTypeId:
          $ref: "#/components/schemas/integer"
        type:
          $ref: "#/components/schemas/string"
        active:
          type: boolean
        lastModifiedDate:
          $ref: "#/components/schemas/date"
        lastModifiedBy:
          $ref: "#/components/schemas/string"
    job:
      type: object
      properties:
        jobId:
          $ref: "#/components/schemas/integer"
        member:
          $ref: "#/components/schemas/string"
        event:
          $ref: "#/components/schemas/string"
        jobDate:
          $ref: "#/components/schemas/date"
        jobType:
          $ref: "#/components/schemas/string"
        verified:
          type: boolean
        verifiedDate:
          $ref: "#/components/schemas/date"
        pointsAwarded:
          $ref: "#/components/schemas/number"
        paid:
          type: boolean
        paidDate:
          $ref: "#/components/schemas/date"
        lastModifiedDate:
          $ref: "#/components/schemas/date"
        lastModifiedBy:
          $ref: "#/components/schemas/string"
    jobType:
      type: object
      properties:
        jobTypeId:
          $ref: "#/components/schemas/integer"
        title:
          $ref: "#/components/schemas/string"
        pointValue:
          $ref: "#/components/schemas/number"
        cashValue:
          $ref: "#/components/schemas/number"
        jobDayNumber:
          $ref: "#/components/schemas/integer"
        reserved:
          type: boolean
        online:
          type: boolean
        mealTicket:
          type: boolean
        sortOrder:
          $ref: "#/components/schemas/integer"
        active:
          type: boolean
        lastModifiedDate:
          $ref: "#/components/schemas/date"
        lastModifiedBy:
          $ref: "#/components/schemas/string"
    eventJob:
      type: object
      properties:
        eventJobId:
          $ref: "#/components/schemas/integer"
        eventType:
          $ref: "#/components/schemas/string"
        jobType:
          $ref: "#/components/schemas/string"
        count:
          $ref: "#/components/schemas/integer"
    bill:
      type: object
      properties:
        billId:
          $ref: "#/components/schemas/integer"
        generatedDate:
          $ref: "#/components/schemas/date"
        year:
          $ref: "#/components/schemas/integer"
        amount:
          $ref: "#/components/schemas/number"
        amountWithFee:
          $ref: "#/components/schemas/number"
        membershipAdmin:
          $ref: "#/components/schemas/string"
        membershipAdminEmail:
          $ref: "#/components/schemas/email"
        emailedBill:
          $ref: "#/components/schemas/date"
        curYearPaid:
          type: boolean
    boardMember:
      type: object
      properties:
        boardId:
          $ref: "#/components/schemas/integer"
        title:
          $ref: "#/components/schemas/string"
        year:
          $ref: "#/components/schemas/integer"
        memberId:
          $ref: "#/components/schemas/integer"
    boardMemberType:
      type: object
      properties:
        boardTitleId:
          $ref: "#/components/schemas/integer"
        title:
          $ref: "#/components/schemas/string"

security:
  - BearerAuth: [] 
paths:
  # member
  /api/member/new:
    post:
      tags:
        - member
      summary: Create a new member
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - memberTypeId
                - modifiedBy
              additionalProperties: false
              properties:
                membershipId:
                  $ref: "#/components/schemas/integer"
                uuid:
                  $ref: "#/components/schemas/uuid"
                memberTypeId:
                  $ref: "#/components/schemas/integer"
                firstName:
                  $ref: "#/components/schemas/string"
                lastName:
                  $ref: "#/components/schemas/string"
                phoneNumber:
                  $ref: "#/components/schemas/string"
                occupation:
                  $ref: "#/components/schemas/string"
                email:
                  $ref: "#/components/schemas/email"
                birthdate:
                  $ref: "#/components/schemas/date"
                dateJoined:
                  $ref: "#/components/schemas/date"
                modifiedBy:
                  $ref: "#/components/schemas/integer"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/member"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/member/list:
    get:
      tags:
        - member
      summary: Get all members
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      parameters:
        - name: role
          in: query
          description: "Optional: filter members by a specific role"
          schema:
            type: string
            enum:
              - admin
              - membershipAdmin
              - member
              - paidLaborer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/member"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/member/{memberID}:
    parameters:
      - name: memberID
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - member
      summary: Get this member
      description: >
        The `memberId` path parameter can either be a database ID or a
        Cognito-provided UUID.
        <br><br>
        This endpoint requires an `Authorization: Bearer` header with a JWT ID token.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/member"
        401:
          $ref: "#/components/responses/unauthorizedError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
    patch:
      tags:
        - member
      summary: Update this member
      description: >
        The `memberId` path parameter can either be a database ID or a
        Cognito-provided UUID.
        <br><br>
        The request body needs only contain the fields with data to be updated.
        If data in a field should not be updated, that field can be omitted from
        the request body.
        <br><br>
        **Note:** This endpoint is used to mark a member as inactive, rather
        than using a `DELETE` endpoint to remove it entirely.
        <br><br>
        This endpoint requires an `Authorization: Bearer` header with a JWT ID token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - modifiedBy
              minProperties: 2
              additionalProperties: false
              properties:
                membershipId:
                  $ref: "#/components/schemas/integer"
                uuid:
                  $ref: "#/components/schemas/uuid"
                active:
                  type: boolean
                memberTypeId:
                  $ref: "#/components/schemas/integer"
                firstName:
                  $ref: "#/components/schemas/string"
                lastName:
                  $ref: "#/components/schemas/string"
                phoneNumber:
                  $ref: "#/components/schemas/string"
                occupation:
                  $ref: "#/components/schemas/string"
                email:
                  $ref: "#/components/schemas/email"
                birthdate:
                  $ref: "#/components/schemas/date"
                dateJoined:
                  $ref: "#/components/schemas/date"
                modifiedBy:
                  $ref: "#/components/schemas/integer"
            example:
              email: newemail@gmail.com
              phoneNumber: 585-123-4567
              modifiedBy: 42
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/member"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"

  # memberType
  /api/memberType/list:
    get:
      tags:
        - memberType
      summary: Get all memberTypes
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/memberType"
        401:
          $ref: "#/components/responses/unauthorizedError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/memberType/{memberTypeID}:
    parameters:
      - name: memberTypeID
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - memberType
      summary: Get this memberType
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/memberType"
        401:
          $ref: "#/components/responses/unauthorizedError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
    patch:
      tags:
        - memberType
      summary: Update this memberType
      description: >
        The request body needs only contain the fields with data to be updated.
        If data in a field should not be updated, that field can be omitted from
        the request body.
        <br><br>
        This endpoint requires an `Authorization: Bearer` header with a JWT ID token.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  $ref: "#/components/schemas/string"
                baseDuesAmt:
                  $ref: "#/components/schemas/number"
            example:
              baseDuesAmt: 100
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/memberType"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"

  # membership
  /api/membership/new:
    post:
      tags:
        - membership
      summary: Create a new membership
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - modifiedBy
              properties:
                membershipAdminId:
                  $ref: "#/components/schemas/integer"
                yearJoined:
                  $ref: "#/components/schemas/integer"
                address:
                  $ref: "#/components/schemas/string"
                city:
                  $ref: "#/components/schemas/string"
                state:
                  $ref: "#/components/schemas/string"
                zip:
                  $ref: "#/components/schemas/string"
                modifiedBy:
                  $ref: "#/components/schemas/integer"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/membership"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/membership/list:
    get:
      tags:
        - membership
      summary: Get all memberships
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      parameters:
        - name: status
          in: query
          description: "Optional: filter memberships by a specific status"
          schema:
            type: string
            enum: 
              - active
              - inactive
              - pending
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/membership"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/membership/register:
    post:
      tags:
        - membership
      summary: Register for a new membership
      security: []
      description: This request does not require authentication.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - memberTypeId
              properties:
                memberTypeId:
                  $ref: "#/components/schemas/integer"
                firstName:
                  $ref: "#/components/schemas/string"
                lastName:
                  $ref: "#/components/schemas/string"
                phoneNumber:
                  $ref: "#/components/schemas/string"
                occupation:
                  $ref: "#/components/schemas/string"
                email:
                  $ref: "#/components/schemas/email"
                birthdate:
                  $ref: "#/components/schemas/date"
                address:
                  $ref: "#/components/schemas/string"
                city:
                  $ref: "#/components/schemas/string"
                state:
                  $ref: "#/components/schemas/string"
                zip:
                  $ref: "#/components/schemas/string"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/registration"
        400:
          $ref: "#/components/responses/badRequestError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/membership/{membershipID}:
    parameters:
      - name: membershipID
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - membership
      summary: Get this membership
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/membership"
        401:
          $ref: "#/components/responses/unauthorizedError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
    patch:
      tags:
        - membership
      summary: Update this membership
      description: >
        The request body needs only contain the fields with data to be updated.
        If data in a field should not be updated, that field can be omitted from
        the request body.
        <br><br>
        **Note:** This endpoint is used to mark a membership as inactive, rather
        than using a `DELETE` endpoint to remove it entirely.
        <br><br>
        This endpoint requires an `Authorization: Bearer` header with a JWT ID token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - modifiedBy
              minProperties: 2
              additionalProperties: false
              properties:
                membershipAdminId:
                  $ref: "#/components/schemas/integer"
                status:
                  $ref: "#/components/schemas/string"
                curYearRenewed:
                  type: boolean
                renewalSent:
                  type: boolean
                yearJoined:
                  $ref: "#/components/schemas/integer"
                address:
                  $ref: "#/components/schemas/string"
                city:
                  $ref: "#/components/schemas/string"
                state:
                  $ref: "#/components/schemas/string"
                zip:
                  $ref: "#/components/schemas/string"
                modifiedBy:
                  $ref: "#/components/schemas/integer"
            example:
              address: 1234 New Address Street
              city: Hoboken
              state: NJ
              zip: 07030
              modifiedBy: 42
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/membership"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
        
  # bike
  /api/bike/new:
    post:
      tags:
        - bike
      summary: Create a new bike
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - membershipId
              properties:
                year:
                  $ref: "#/components/schemas/shortString"
                make:
                  $ref: "#/components/schemas/shortString"
                model:
                  $ref: "#/components/schemas/shortString"
                membershipId:
                  $ref: "#/components/schemas/integer"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bike"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/bike/list:
    get:
      tags:
        - bike
      summary: Get all bikes
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      parameters:
        - name: membershipID
          in: query
          description: "Optional: pull bikes for a specific membership"
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/bike"
        401:
          $ref: "#/components/responses/unauthorizedError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/bike/{bikeID}:
    parameters:
      - name: bikeID
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - bike
      summary: Get this bike
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bike"
        401:
          $ref: "#/components/responses/unauthorizedError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
    patch:
      tags:
        - bike
      summary: Update this bike
      description: >
        The request body needs only contain the fields with data to be updated.
        If data in a field should not be updated, that field can be omitted from
        the request body.
        <br><br>
        This endpoint requires an `Authorization: Bearer` header with a JWT ID token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              additionalProperties: false
              properties:
                year:
                  $ref: "#/components/schemas/shortString"
                make:
                  $ref: "#/components/schemas/shortString"
                model:
                  $ref: "#/components/schemas/shortString"
                membershipId:
                  $ref: "#/components/schemas/integer"
            example:
              membershipId: 101
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bike"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
    delete:
      tags:
        - bike
      summary: Delete this bike
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  bikeId:
                    $ref: "#/components/schemas/integer"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"

  # event
  /api/event/new:
    post:
      tags:
        - event
      summary: Create a new event
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      parameters:
        - name: autoGenerateJobs
          in: query
          description: "Optional: auto-generate known jobs necessary for this new event"
          schema:
            type: boolean
            default: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  $ref: "#/components/schemas/date"
                eventTypeId:
                  $ref: "#/components/schemas/integer"
                eventName:
                  $ref: "#/components/schemas/string"
                eventDescription:
                  $ref: "#/components/schemas/string"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/event"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/event/list:
    get:
      tags:
        - event
      summary: Get all events
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      parameters:
        - name: Range
          in: header
          description: |
            Optional: filter events by a specific timeframe (inclusive).
            Format is one of:
            - `YYYYMMDD-YYYYMMDD`
            - `YYYYMMDD-`
            - `-YYYYMMDD`
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/event"
        206:
          description: Partial Content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/event"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/event/{eventID}:
    parameters:
      - name: eventID
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - event
      summary: Get this event
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/event"
        401:
          $ref: "#/components/responses/unauthorizedError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
    patch:
      tags:
        - event
      summary: Update this event
      description: >
        The request body needs only contain the fields with data to be updated.
        If data in a field should not be updated, that field can be omitted from
        the request body.
        <br><br>
        This endpoint requires an `Authorization: Bearer` header with a JWT ID token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              additionalProperties: false
              properties:
                date:
                  $ref: "#/components/schemas/date"
                eventTypeId:
                  $ref: "#/components/schemas/integer"
                eventName:
                  $ref: "#/components/schemas/string"
                eventDescription:
                  $ref: "#/components/schemas/string"
            example:
              date: 12/18/21
              eventName: Squeaky Training Wheels Invitational (Rescheduled)
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/event"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
    delete:
      tags:
        - event
      summary: Delete this event
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  eventId:
                    $ref: "#/components/schemas/integer"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
  
  # eventType
  /api/eventType/new:
    post:
      tags:
        - eventType
      summary: Create a new event type
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - modifiedBy
              properties:
                type:
                  $ref: "#/components/schemas/string"
                modifiedBy:
                  $ref: "#/components/schemas/integer"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/eventType"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/eventType/list:
    get:
      tags:
        - eventType
      summary: Get all event types
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/eventType"
        401:
          $ref: "#/components/responses/unauthorizedError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/eventType/{eventTypeID}:
    parameters:
      - name: eventTypeID
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - eventType
      summary: Get this event type
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/eventType"
        401:
          $ref: "#/components/responses/unauthorizedError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
    patch:
      tags:
        - eventType
      summary: Update this event type
      description: >
        The request body needs only contain the fields with data to be updated.
        If data in a field should not be updated, that field can be omitted from
        the request body.
        <br><br>
        **Note:** This endpoint is used to mark an event type as inactive, rather
        than using a `DELETE` endpoint to remove it entirely.
        <br><br>
        This endpoint requires an `Authorization: Bearer` header with a JWT ID token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - modifiedBy
              properties:
                type:
                  $ref: "#/components/schemas/string"
                active:
                  type: boolean
                modifiedBy:
                  $ref: "#/components/schemas/integer"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/eventType"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"

  # job
  /api/job/new:
    post:
      tags:
        - job
      summary: Create a new job
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - jobTypeId
                - jobDate
                - modifiedBy
              properties:
                memberId:
                  $ref: "#/components/schemas/integer"
                eventId:
                  $ref: "#/components/schemas/integer"
                jobTypeId:
                  $ref: "#/components/schemas/integer"
                jobDate:
                  $ref: "#/components/schemas/date"
                pointsAwarded:
                  $ref: "#/components/schemas/number"
                modifiedBy:
                  $ref: "#/components/schemas/integer"
                verified:
                  type: boolean
                verifiedDate:
                  $ref: "#/components/schemas/date"
                paid:
                  type: boolean
                paidDate:
                  $ref: "#/components/schemas/date"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/job"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/job/list:
    get:
      tags:
        - job
      summary: Get all jobs
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      parameters:
        - name: assignmentStatus
          in: query
          description: "Optional: filter jobs by a specific assignment status"
          schema:
            type: string
            enum:
              - open
              - assigned
        - name: verificationStatus
          in: query
          description: "Optional: filter jobs by a specific verification status"
          schema:
            type: string
            enum:
              - pending
              - verified
        - name: memberID
          in: query
          description: "Optional: pull jobs for a specific **member**"
          schema:
            type: integer
        - name: membershipID
          in: query
          description: "Optional: pull jobs for a specific **membership**"
          schema:
            type: integer
        - name: eventID
          in: query
          description: "Optional: pull jobs for a specific **event**"
          schema:
            type: integer
        - name: Range
          in: header
          description: |
            Optional: filter jobs by a specific timeframe.
            Format is one of:
            - `YYYYMMDD-YYYYMMDD`
            - `YYYYMMDD-`
            - `-YYYYMMDD`
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/job"
        206:
          description: Partial Content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/job"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/job/{jobID}:
    parameters:
      - name: jobID
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - job
      summary: Get this job
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/job"
        401:
          $ref: "#/components/responses/unauthorizedError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
    patch:
      tags:
        - job
      summary: Update this job
      description: >
        The request body needs only contain the fields with data to be updated.
        If data in a field should not be updated, that field can be omitted from
        the request body.
        <br><br>
        **Note 1:** This endpoint is used to verify work points.
        <br><br>
        **Note 2:** While most fields require admin permissions
        to update, both *1)* assigning the job to a member or paid laborer and
        *2)* checking in to the job can be done by a member as well.
        <br><br>
        This endpoint requires an `Authorization: Bearer` header with a JWT ID token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - modifiedBy
              minProperties: 2
              additionalProperties: false
              properties:
                memberId:
                  $ref: "#/components/schemas/integer"
                eventId:
                  $ref: "#/components/schemas/integer"
                jobTypeId:
                  $ref: "#/components/schemas/integer"
                jobDate:
                  $ref: "#/components/schemas/date"
                verified:
                  type: boolean
                paid:
                  type: boolean
                modifiedBy:
                  $ref: "#/components/schemas/integer"
            example:
              verified: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/job"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
    post:
      tags:
        - job
      summary: Clone this job
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/job"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
    delete:
      tags:
        - job
      summary: Delete this job
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    $ref: "#/components/schemas/integer"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
  
  # jobType
  /api/jobType/new:
    post:
      tags:
        - jobType
      summary: Create a new job type
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - reserved
                - online
                - mealTicket
                - modifiedBy
              properties:
                title:
                  $ref: "#/components/schemas/string"
                pointValue:
                  $ref: "#/components/schemas/number"
                cashValue:
                  $ref: "#/components/schemas/number"
                jobDayNumber:
                  $ref: "#/components/schemas/integer"
                reserved:
                  type: boolean
                online:
                  type: boolean
                mealTicket:
                  type: boolean
                sortOrder:
                  $ref: "#/components/schemas/integer"
                modifiedBy:
                  $ref: "#/components/schemas/integer"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/jobType"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/jobType/list:
    get:
      tags:
        - jobType
      summary: Get all job types
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/jobType"
        401:
          $ref: "#/components/responses/unauthorizedError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/jobType/{jobTypeID}:
    parameters:
      - name: jobTypeID
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - jobType
      summary: Get this job type
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/jobType"
        401:
          $ref: "#/components/responses/unauthorizedError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
    patch:
      tags:
        - jobType
      summary: Update this job type
      description: >
        The request body needs only contain the fields with data to be updated.
        If data in a field should not be updated, that field can be omitted from
        the request body.
        <br><br>
        **Note:** This endpoint is used to mark a job type as inactive, rather
        than using a `DELETE` endpoint to remove it entirely.
        <br><br>
        This endpoint requires an `Authorization: Bearer` header with a JWT ID token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - modifiedBy
              minProperties: 2
              additionalProperties: false
              properties:
                title:
                  $ref: "#/components/schemas/string"
                pointValue:
                  $ref: "#/components/schemas/number"
                cashValue:
                  $ref: "#/components/schemas/number"
                jobDayNumber:
                  $ref: "#/components/schemas/integer"
                reserved:
                  type: boolean
                online:
                  type: boolean
                mealTicket:
                  type: boolean
                sortOrder:
                  $ref: "#/components/schemas/integer"
                active:
                  type: boolean
                modifiedBy:
                  $ref: "#/components/schemas/integer"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/jobType"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
  
  # workPoints
  /api/workPoints/byMember/{memberID}:
    parameters:
      - name: memberID
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - workPoints
      summary: Get the total verified work points for this member
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      parameters:
        - name: year
          in: query
          description: "Optional: pull the work point total for a specific year"
          schema:
            type: integer
            default: the current year
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    $ref: "#/components/schemas/number"
        401:
          $ref: "#/components/responses/unauthorizedError"
        400:
          $ref: "#/components/responses/badRequestError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/workPoints/byMembership/{membershipID}:
    parameters:
      - name: membershipID
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - workPoints
      summary: Get the total verified work points for this membership
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      parameters:
        - name: year
          in: query
          description: "Optional: pull the work point total for a specific year"
          schema:
            type: integer
            default: the current year
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    $ref: "#/components/schemas/number"
        401:
          $ref: "#/components/responses/unauthorizedError"
        400:
          $ref: "#/components/responses/badRequestError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
  
  # eventJob
  /api/eventJob/new:
    post:
      tags:
        - eventJob
      summary: Create a new event-job instance
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - eventTypeId
                - jobTypeId
                - count
              properties:
                eventTypeId:
                  $ref: "#/components/schemas/integer"
                jobTypeId:
                  $ref: "#/components/schemas/integer"
                count:
                  $ref: "#/components/schemas/integer"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/eventJob"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/eventJob/{eventJobID}:
    parameters:
      - name: eventJobID
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - eventJob
      summary: Get this event-job instance
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/eventJob"
        401:
          $ref: "#/components/responses/unauthorizedError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
    patch:
      tags:
        - eventJob
      summary: Update this event-job instance
      description: >
        The request body needs only contain the fields with data to be updated.
        If data in a field should not be updated, that field can be omitted from
        the request body.
        <br><br>
        This endpoint requires an `Authorization: Bearer` header with a JWT ID token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              additionalProperties: false
              properties:
                eventTypeId:
                  $ref: "#/components/schemas/integer"
                jobTypeId:
                  $ref: "#/components/schemas/integer"
                count:
                  $ref: "#/components/schemas/integer"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/eventJob"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
    delete:
      tags:
        - eventJob
      summary: Delete this event-job instance
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  eventJobId:
                    $ref: "#/components/schemas/integer"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"

  # billing
  /api/billing/yearlyWorkPointThreshold:
    get:
      tags:
        - billing
      summary: Get a year's work point threshold for completely subsidizing dues
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      parameters:
        - name: year
          in: query
          description: "Optional: pull the threshold for a specific year"
          schema:
            type: integer
            default: the current year
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  year:
                    $ref: "#/components/schemas/integer"
                  threshold:
                    $ref: "#/components/schemas/integer"
        401:
          $ref: "#/components/responses/unauthorizedError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/billing/list:
    get:
      tags:
        - billing
      summary: Get all bills by payment status or year
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      parameters:
        - name: paymentStatus
          in: query
          description: "Optional: filter bills by a specific payment status"
          schema:
            type: string
            enum:
              - paid
              - outstanding
        - name: year
          in: query
          description: "Optional: filter bills by a specific year"
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/bill"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/billing/{membershipID}:
    parameters:
      - name: membershipID
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - billing
      summary: Get bills for this membership
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      parameters:
        - name: year
          in: query
          description: "Optional: filter bills by a specific year"
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/bill"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
    post:
      tags:
        - billing
      summary: Pay this membership's outstanding balance
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      responses:
        200:
          description: OK
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/billing:
    post:
      tags:
        - billing
      summary: Calculate and distribute all bills for the year
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/bill"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        500:
          $ref: "#/components/responses/internalServerError"

  # boardMember
  /api/boardMember/new:
    post:
      tags:
        - boardMember
      summary: Create a new boardMember
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - boardMemberTitleId
                - year
                - memberId
              additionalProperties: false
              properties:
                boardMemberTitleId:
                  $ref: "#/components/schemas/integer"
                year:
                  $ref: "#/components/schemas/number"
                memberId:
                  $ref: "#/components/schemas/number"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/boardMember"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/boardMember/list:
    get:
      tags:
        - boardMember
      summary: Get all board members
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      parameters:
        - name: year
          in: query
          description: "Optional: filter board members by a specific year"
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/boardMember"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/boardMember/{boardMemberID}:
    parameters:
      - name: boardMemberID
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - boardMember
      summary: Get this board member
      description: >
        This endpoint requires an `Authorization: Bearer` header with a JWT ID token.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/boardMember"
        401:
          $ref: "#/components/responses/unauthorizedError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
    patch:
      tags:
        - boardMember
      summary: Update this board member
      description: >
        The request body needs only contain the fields with data to be updated.
        If data in a field should not be updated, that field can be omitted from
        the request body.
        <br><br>
        This endpoint requires an `Authorization: Bearer` header with a JWT ID token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              additionalProperties: false
              properties:
                boardMemberTitleId:
                  $ref: "#/components/schemas/integer"
                year:
                  $ref: "#/components/schemas/integer"
                memberId:
                  $ref: "#/components/schemas/integer"
            example:
              year: 2021
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/boardMember"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
    delete:
      tags:
        - boardMember
      summary: Delete this board member instance
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  boardMemberId:
                    $ref: "#/components/schemas/integer"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
  
  # boardMemberType
  /api/boardMemberType/new:
    post:
      tags:
        - boardMemberType
      summary: Create a new boardMemberType
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              additionalProperties: false
              properties:
                title:
                  $ref: "#/components/schemas/string"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/boardMemberType"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/boardMemberType/list:
    get:
      tags:
        - boardMemberType
      summary: Get all board member types
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/boardMemberType"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        500:
          $ref: "#/components/responses/internalServerError"
  /api/boardMember/{boardMemberTypeID}:
    parameters:
      - name: boardMemberTypeID
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - boardMemberType
      summary: Get this board member type
      description: >
        This endpoint requires an `Authorization: Bearer` header with a JWT ID token.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/boardMemberType"
        401:
          $ref: "#/components/responses/unauthorizedError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
    patch:
      tags:
        - boardMemberType
      summary: Update this board member type
      description: >
        The request body needs only contain the fields with data to be updated.
        If data in a field should not be updated, that field can be omitted from
        the request body.
        <br><br>
        This endpoint requires an `Authorization: Bearer` header with a JWT ID token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              additionalProperties: false
              properties:
                title:
                  $ref: "#/components/schemas/string"
            example:
              title: "President"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/boardMemberType"
        400:
          $ref: "#/components/responses/badRequestError"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"
    delete:
      tags:
        - boardMemberType
      summary: Delete this board member type instance
      description: "This endpoint requires an `Authorization: Bearer` header with a JWT ID token."
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  boardMemberTypeId:
                    $ref: "#/components/schemas/integer"
        401:
          $ref: "#/components/responses/unauthorizedError"
        403:
          $ref: "#/components/responses/forbiddenError"
        404:
          $ref: "#/components/responses/notFoundError"
        500:
          $ref: "#/components/responses/internalServerError"